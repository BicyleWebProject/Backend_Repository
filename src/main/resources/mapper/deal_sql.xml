<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bicycle.project.oauthlogin.domain.deal.DealDao">

    <select id="getTopList" resultType="com.bicycle.project.oauthlogin.domain.deal.dto.GetTopListRes">
        select d.title as title
                ,count(dl.deal_like_id) as total,
               d.deal_Id as dealId,
               d.category_Id as categoryId
        from deal d, deal_like dl
        where
            d.deal_id = dl.deal_id
        group by dl.deal_id
        order by total desc limit 5
    </select>

    <select id="getRecentList" resultType="com.bicycle.project.oauthlogin.domain.deal.dto.RecentListDto">
        select u.user_id,d.title, d.deal_id,d.category_id,
               d.image_url1, d.image_url2, d.image_url3, d.price
        from deal d left outer join user u
                                    on d.user_id = u.user_id
        where u.user_id=#{userEmail}
        order by d.updated_at
                desc limit 10;

    </select>

    <select id="getFullRecentList" parameterType="com.bicycle.project.oauthlogin.domain.deal.dto.RecentListReq"
            resultType="com.bicycle.project.oauthlogin.domain.deal.dto.GetFullRecentListRes">
        select d.deal_id as dealId,
               d.content as content,
               d.user_id as userEmail,
               d.image_url1 as imageUrl1,
               d.image_url2 as imageUrl2,
               d.image_url3 as imageUrl3,
               d.price as price,
               d.title as title,
               d.updated_at as updatedAt,
               d.category_id as categoryId,
               u.profile_image_url as userImg,
               COUNT(dls.deal_likes) as dealLikes
        from deal d left outer join
             (select COUNT(*) as 'deal_likes', deal_like_id
             from deal_like dl group by dl.deal_id) as dls on d.deal_id = dls.deal_like_id
            left outer join user u on d.user_id = u.user_id
        where d.category_id=#{categoryId}
        group by d.deal_id
        order by d.updated_at desc limit 11 offset #{page};
    </select>


    <select id="getSumBoard" parameterType="com.bicycle.project.oauthlogin.domain.deal.dto.RecentListReq"
            resultType="Integer">
        select COUNT(*)
        from (SELECT title,
                     updated_at as updatedAt
              from deal
              order by updated_at desc
              ) as a
    </select>

    <insert id="writeDeal" parameterType="com.bicycle.project.oauthlogin.domain.deal.dto.WritingDealReq">
        insert into deal( created_at, status, updated_at, content, price, title, category_id, user_id, image_url1, image_url2,image_url3)
        values ( #{createdAt}, #{status}, #{updatedAt}, #{content}, #{price}, #{title}, #{categoryId}, #{userId}, #{imageUrl1}, #{imageUrl2}, #{imageUrl3})
    </insert>




    <select id="getDealDetail" resultType="com.bicycle.project.oauthlogin.domain.deal.dto.GetDealDetailRes">
        select
            d.title,
            u.username as userNickname,
            d.image_url1 as imageUrl1,
            d.image_url2 as imageUrl2,
            d.image_url3 as imageUrl3,
            d.content as content,
            d.price as price,
            u.profile_image_url as userImageUrl,
            u.user_idx as userId,
            u.location as location
        from
            deal d
                inner join user u on d.user_id = u.user_idx
                left join (select
                               ifnull(count(dl.deal_like_id),0) as total,
                               dl.deal_id
                           from deal_like dl
                           group by dl.deal_id)as lf on d.deal_id = lf.deal_id
        where
            d.deal_id = #{dealId}
    </select>


    <insert id="pushDealLike" parameterType="com.bicycle.project.oauthlogin.domain.deal.dto.DealLikeReq">
        insert into deal_like( created_at, status, updated_at, deal_id, user_id) values
            (#{createdAt}, #{status}, #{updatedAt}, #{dealId}, #{userId})
    </insert>


    <insert id="updateDeal" parameterType="com.bicycle.project.oauthlogin.domain.deal.dto.UpdateDealReq">
        update deal
        set updated_at = #{updatedAt},
            content = #{content},
            price = #{price},
            title = #{title},
            category_id = #{categoryId}
        where
            deal_id = #{dealId}
    </insert>

    <delete id="deleteDealLike">
        delete from deal_like
        where deal_id = #{dealId}
    </delete>

    <delete id="deleteDeal">
        delete from deal
        where deal_id = #{dealId}
    </delete>







</mapper>
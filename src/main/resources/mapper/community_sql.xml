<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bicycle.project.oauthlogin.domain.community.CommunityDao">

    <select id="getTopList" resultType="com.bicycle.project.oauthlogin.domain.community.dto.TopListDto">
        select
            c.title,count(community_like_id) as total,
            c.community_Id as communityId,
            c.category_Id as categoryId
        from community_like cl, community c
        where
            cl.community_id = c.community_id
        group by cl.community_id
        order by total desc limit 5
    </select>

    <select id="getRecentList" resultType="com.bicycle.project.oauthlogin.domain.community.dto.RecentListDto">
        select
            c.title as title,
            c.category_Id as categoryId,
            c.user_id as userEmail,
            c.content as content,
            c.community_id as communityId,
            c.community_image_url as communityImageUrl
        from community c
        order by updated_at desc limit 10
    </select>

    <select id="getUserRecentList" parameterType="com.bicycle.project.oauthlogin.domain.community.dto.CommunityListReq"
            resultType="com.bicycle.project.oauthlogin.domain.community.dto.GetUserRecentList">

        select c.community_id as communityId,
               c.updated_at as updatedAt,
               c.created_at as createdAt,
               c.content as content,
               c.title as title,
               c.category_id as categoryId,
               c.user_id as uerEmail,
               c.community_image_url as communityImageUrl,
               COUNT(cm.comment_id) as commentCount,
               COUNT(cl.community_like_id) as likeCount,
               u.profile_image_url as userImgUrl
        from community as c
                 left outer join (select COUNT(*) as 'comments', community_id, comment_id from comment group by community_id) as cm on c.community_id = cm.community_id
                 left outer join user u on c.user_id = u.user_id
                 left outer join (select COUNT(*) as 'community_likes',community_like_id, community_id from community_like group by community_like_id ) as cl on
            (c.community_id = cl.community_id )
        group by c.community_id  order by c.updated_at desc limit 11 offset #{page};
    </select>

    <select id="getSumBoard" parameterType="com.bicycle.project.oauthlogin.domain.community.dto.CommunityListReq"
            resultType="Integer">
        select COUNT(*)
        from (SELECT title,
                     content,
                     updated_at as updatedAt
              from community
              order by updated_at desc
              ) as a
    </select>

    <select id="getSearchByWriter" resultType="com.bicycle.project.oauthlogin.domain.community.dto.GetSearchByWriter">
        select c.community_id as communityId,
               c.created_at as createdAt,
               c.updated_at as updatedAt,
               c.content as content,
               c.title as title,
               c.category_id as categoryId,
               c.user_id as userEmail,
               COUNT(cm.comment_id) as commentCount,
               COUNT(cl.community_like_id) as likeCount
        from community as c
                 left outer join (select COUNT(*) as 'comments', community_id, comment_id from comment group by community_id) as cm on c.community_id = cm.community_id
                 left outer join user u on c.user_id = u.user_id
                 left outer join (select COUNT(*) as 'community_likes',community_like_id, community_id from community_like group by community_like_id ) as cl on
            (c.community_id = cl.community_id )
        where c.user_id = #{userEmail}
        group by c.community_id  order by c.updated_at desc limit 11;
    </select>

    <select id="getSearchByContent" resultType="com.bicycle.project.oauthlogin.domain.community.dto.GetSearchByContent">
        select c.community_id as communityId,
               c.created_at as createdAt,
               c.updated_at as updatedAt,
               c.content as content,
               c.title as title,
               c.category_id as categoryId,
               c.user_id as userEmail,
               COUNT(cm.comment_id) as commentCount,
               COUNT(cl.community_like_id) as likeCount
        from community as c
                 left outer join (select COUNT(*) as 'comments', community_id, comment_id from comment group by community_id) as cm on c.community_id = cm.community_id
                 left outer join user u on c.user_id = u.user_id
                 left outer join (select COUNT(*) as 'community_likes',community_like_id, community_id from community_like group by community_like_id ) as cl on
            (c.community_id = cl.community_id )
        where c.content Like CONCAT('%',#{content},'%')
        group by c.community_id  order by c.updated_at desc limit 11;
    </select>

    <insert id="writeCommunity" parameterType="com.bicycle.project.oauthlogin.domain.community.dto.CommunityWritingReq">
        insert into
            community(title, content, user_id,community_image_url, status,created_at,updated_at)
        values (#{title}, #{content}, #{userId}, #{communityImageUrl}, #{status}, #{createdAt}, #{updatedAt})
    </insert>


    <select id="getCommunityDetail" resultType="com.bicycle.project.oauthlogin.domain.community.dto.CommunityDetailRes">
        select
            c.title as title,
            u.username as userNickname,
            c.community_image_url as communityImageUrl,
            c.content as content,
            u.profile_image_url as userImageUrl,
            c.created_at as createdAt,
            u.user_idx as userId,
            count(cl.community_like_id) as total
        from community c,
             user u,
             community_like cl
        where
            c.user_id = u.user_idx
          and c.community_id = cl.community_id
          and c.community_id= #{communityId}
        group by c.community_id
    </select>


    <insert id="pushCommunityLike" parameterType="com.bicycle.project.oauthlogin.domain.community.dto.CommunityLikeReq">
        insert into community_like( created_at, status, updated_at, community_id, user_id) values
            (#{createdAt}, #{status}, #{updatedAt}, #{communityId}, #{userId})
    </insert>


    <update id="updateCommunity" parameterType="com.bicycle.project.oauthlogin.domain.community.dto.UpdateCommunityReq">
        update community
        set  content = #{content}
          ,updated_at = #{updatedAt}
          , content = #{content}
          , title = #{title}
          , category_id = #{categoryId}
        where community_id = #{communityId}
    </update>

    <delete id="deleteCommunityLike" >
        delete
        from community_like
        where community_id = #{communityId}
    </delete>

    <delete id="deleteCommunity" >
        delete from community
        where community_id = #{communityId}
    </delete>








</mapper>